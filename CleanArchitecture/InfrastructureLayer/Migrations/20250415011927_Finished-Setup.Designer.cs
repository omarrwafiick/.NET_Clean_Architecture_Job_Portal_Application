// <auto-generated />
using System;
using InfrastructureLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InfrastructureLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250415011927_Finished-Setup")]
    partial class FinishedSetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DomainLayer.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("DomainLayer.Models.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a35e9533-8cf9-4f12-af3e-89e8c1e56990"),
                            Name = "Pending"
                        },
                        new
                        {
                            Id = new Guid("c350b43b-f6c4-4fe3-bd13-f5b362daac18"),
                            Name = "Reviewed"
                        },
                        new
                        {
                            Id = new Guid("4424f875-b8fb-4eab-9902-39afac189a7a"),
                            Name = "Shortlisted"
                        },
                        new
                        {
                            Id = new Guid("10234718-cb49-4e33-90d3-55166b318850"),
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = new Guid("eca21248-960e-42a3-875d-ee8dc90f8397"),
                            Name = "Hired"
                        });
                });

            modelBuilder.Entity("DomainLayer.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1111111-aaaa-4bbb-cccc-111111111111"),
                            Description = "An innovative tech company building AI tools.",
                            Name = "TechNova Inc.",
                            Website = "https://technova.com"
                        },
                        new
                        {
                            Id = new Guid("c2222222-aaaa-4bbb-cccc-222222222222"),
                            Description = "A healthcare organization focused on digital transformation.",
                            Name = "HealthCare Plus",
                            Website = "https://healthcareplus.org"
                        },
                        new
                        {
                            Id = new Guid("c3333333-aaaa-4bbb-cccc-333333333333"),
                            Description = "Leading fintech platform provider.",
                            Name = "FinPro Solutions",
                            Website = "https://finprosolutions.com"
                        });
                });

            modelBuilder.Entity("DomainLayer.Models.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppliedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JobPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResumeUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("JobPostId");

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("DomainLayer.Models.JobPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("JobTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SalaryFrom")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalaryTo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobTypeId");

                    b.ToTable("JobPosts");
                });

            modelBuilder.Entity("DomainLayer.Models.JobType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b4242be9-6359-4a4d-85ac-2db711793a12"),
                            Name = "FullTime"
                        },
                        new
                        {
                            Id = new Guid("3cc26e7b-e871-4b2b-bf0a-b3de7b9cc95e"),
                            Name = "PartTime"
                        },
                        new
                        {
                            Id = new Guid("9ea59c79-fc01-4308-a9ca-f46b7af7b34b"),
                            Name = "Contract"
                        },
                        new
                        {
                            Id = new Guid("74fb7c4a-8b8e-405e-88dc-9c6fade5e261"),
                            Name = "Internship"
                        },
                        new
                        {
                            Id = new Guid("0406323d-7e3f-40a4-ab25-e3477690d945"),
                            Name = "Freelance"
                        });
                });

            modelBuilder.Entity("DomainLayer.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd2d73f2-08a7-4481-b1be-eec35c7021fc"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("582b805e-c25d-43a3-8985-a8d67de41ca2"),
                            Name = "Employer"
                        },
                        new
                        {
                            Id = new Guid("ffffae69-fb29-4f2e-b7c5-a597712a4912"),
                            Name = "Candidate"
                        });
                });

            modelBuilder.Entity("DomainLayer.Models.AppUser", b =>
                {
                    b.HasOne("DomainLayer.Models.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainLayer.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DomainLayer.Models.JobApplication", b =>
                {
                    b.HasOne("DomainLayer.Models.ApplicationStatus", "Status")
                        .WithMany()
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Models.AppUser", "Candidate")
                        .WithMany("Applications")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Models.JobPost", "JobPost")
                        .WithMany("Applications")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("JobPost");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DomainLayer.Models.JobPost", b =>
                {
                    b.HasOne("DomainLayer.Models.Company", "Company")
                        .WithMany("JobPosts")
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainLayer.Models.AppUser", "Employer")
                        .WithMany("JobPosts")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Models.JobType", "Type")
                        .WithMany()
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Employer");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DomainLayer.Models.AppUser", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("DomainLayer.Models.Company", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("DomainLayer.Models.JobPost", b =>
                {
                    b.Navigation("Applications");
                });
#pragma warning restore 612, 618
        }
    }
}
